// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Orkaris_Back.Models.EntityFramework;

#nullable disable

namespace Orkaris_Back.Migrations
{
    [DbContext(typeof(WorkoutDBContext))]
    [Migration("20250523141147_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Orkaris_Back.Models.EntityFramework.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("cat_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("cat_created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("cat_name");

                    b.Property<Guid>("SportId")
                        .HasColumnType("uuid")
                        .HasColumnName("spo_id");

                    b.HasKey("Id")
                        .HasName("PK_Category");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("SportId");

                    b.ToTable("t_e_category_cat", (string)null);
                });

            modelBuilder.Entity("Orkaris_Back.Models.EntityFramework.EmailConfirmationToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ect_id");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ect_expiration_date");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("boolean")
                        .HasColumnName("ect_is_used");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("ect_token");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("usr_id");

                    b.HasKey("Id")
                        .HasName("PK_EmailConfirmationToken");

                    b.HasIndex("UserId");

                    b.ToTable("t_email_confirmation_tokens_ect", (string)null);
                });

            modelBuilder.Entity("Orkaris_Back.Models.EntityFramework.Exercise", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("exr_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("exr_created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("exr_description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("exr_name");

                    b.HasKey("Id")
                        .HasName("PK_Exercise");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("t_e_Exercise_exr", (string)null);
                });

            modelBuilder.Entity("Orkaris_Back.Models.EntityFramework.ExerciseCategory", b =>
                {
                    b.Property<Guid>("ExerciseId")
                        .HasColumnType("uuid")
                        .HasColumnName("exr_id");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("cat_id");

                    b.HasKey("ExerciseId", "CategoryId")
                        .HasName("PK_ExerciseCategory");

                    b.HasIndex("CategoryId");

                    b.ToTable("t_j_exercise_category_ext", (string)null);
                });

            modelBuilder.Entity("Orkaris_Back.Models.EntityFramework.ExerciseGoal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("exg_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("exr_created_at");

                    b.Property<Guid>("ExerciseId")
                        .HasColumnType("uuid")
                        .HasColumnName("exr_id");

                    b.Property<int>("Reps")
                        .HasColumnType("integer")
                        .HasColumnName("exg_reps");

                    b.Property<int>("Sets")
                        .HasColumnType("integer")
                        .HasColumnName("exg_sets");

                    b.HasKey("Id")
                        .HasName("PK_ExerciseGoal");

                    b.HasIndex("ExerciseId");

                    b.ToTable("t_e_exercise_goal_exg", (string)null);
                });

            modelBuilder.Entity("Orkaris_Back.Models.EntityFramework.ExerciseGoalPerformance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("egp_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("egp_created_at");

                    b.Property<Guid>("ExerciseGoalId")
                        .HasColumnType("uuid")
                        .HasColumnName("exg_id");

                    b.Property<int>("Reps")
                        .HasColumnType("integer")
                        .HasColumnName("egp_reps");

                    b.Property<int>("Sets")
                        .HasColumnType("integer")
                        .HasColumnName("egp_sets");

                    b.HasKey("Id")
                        .HasName("PK_ExerciseGoalPerformance");

                    b.HasIndex("ExerciseGoalId");

                    b.ToTable("t_e_exercise_goal_performance_egp", (string)null);
                });

            modelBuilder.Entity("Orkaris_Back.Models.EntityFramework.Session", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ses_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ses_created_at");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("interval")
                        .HasColumnName("ses_duration");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("ses_name");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("usr_id");

                    b.Property<Guid>("WorkoutId")
                        .HasColumnType("uuid")
                        .HasColumnName("wrk_id");

                    b.HasKey("Id")
                        .HasName("PK_Session");

                    b.HasIndex("UserId");

                    b.HasIndex("WorkoutId");

                    b.ToTable("t_e_session_ses", (string)null);
                });

            modelBuilder.Entity("Orkaris_Back.Models.EntityFramework.SessionExercise", b =>
                {
                    b.Property<Guid>("SessionId")
                        .HasColumnType("uuid")
                        .HasColumnName("ses_id");

                    b.Property<Guid>("ExerciseId")
                        .HasColumnType("uuid")
                        .HasColumnName("exg_id");

                    b.HasKey("SessionId", "ExerciseId")
                        .HasName("PK_SessionExercise");

                    b.HasIndex("ExerciseId");

                    b.ToTable("t_j_session_exercise_goal_seg", (string)null);
                });

            modelBuilder.Entity("Orkaris_Back.Models.EntityFramework.SessionPerformance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("spe_id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("spe_date");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uuid")
                        .HasColumnName("ses_id");

                    b.Property<string>("feeling")
                        .HasColumnType("text")
                        .HasColumnName("spe_feeling");

                    b.HasKey("Id")
                        .HasName("PK_SessionPerformance");

                    b.HasIndex("SessionId");

                    b.ToTable("t_e_session_performance_spe", (string)null);
                });

            modelBuilder.Entity("Orkaris_Back.Models.EntityFramework.Sport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("spo_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("spo_name");

                    b.HasKey("Id")
                        .HasName("PK_Sport");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("t_e_sport_spo", (string)null);
                });

            modelBuilder.Entity("Orkaris_Back.Models.EntityFramework.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("usr_id");

                    b.Property<DateOnly?>("BirthDate")
                        .HasColumnType("date")
                        .HasColumnName("usr_birth_date");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("usr_created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("usr_email");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("usr_gender");

                    b.Property<int>("Height")
                        .HasColumnType("integer")
                        .HasColumnName("usr_height");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("boolean")
                        .HasColumnName("usr_is_verified");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("usr_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("usr_password");

                    b.Property<int>("ProfileType")
                        .HasColumnType("integer")
                        .HasColumnName("usr_profile_type");

                    b.Property<int>("Weight")
                        .HasColumnType("integer")
                        .HasColumnName("usr_weight");

                    b.HasKey("Id")
                        .HasName("PK_User");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("t_e_user_usr", (string)null);
                });

            modelBuilder.Entity("Orkaris_Back.Models.EntityFramework.Workout", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("pfr_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("pfr_created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("pfr_name");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("usr_id");

                    b.HasKey("Id")
                        .HasName("PK_Workout");

                    b.HasIndex("UserId");

                    b.ToTable("t_e_Workout_pgr", (string)null);
                });

            modelBuilder.Entity("Orkaris_Back.Models.EntityFramework.Category", b =>
                {
                    b.HasOne("Orkaris_Back.Models.EntityFramework.Sport", "SportCategory")
                        .WithMany("CategorySport")
                        .HasForeignKey("SportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SportCategory");
                });

            modelBuilder.Entity("Orkaris_Back.Models.EntityFramework.EmailConfirmationToken", b =>
                {
                    b.HasOne("Orkaris_Back.Models.EntityFramework.User", "UserEmail")
                        .WithMany("EmailUser")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserEmail");
                });

            modelBuilder.Entity("Orkaris_Back.Models.EntityFramework.ExerciseCategory", b =>
                {
                    b.HasOne("Orkaris_Back.Models.EntityFramework.Category", "CategoryExerciseCategory")
                        .WithMany("ExerciseCategoryCategory")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Orkaris_Back.Models.EntityFramework.Exercise", "ExerciseExerciseCategory")
                        .WithMany("ExerciseCategoryExercise")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CategoryExerciseCategory");

                    b.Navigation("ExerciseExerciseCategory");
                });

            modelBuilder.Entity("Orkaris_Back.Models.EntityFramework.ExerciseGoal", b =>
                {
                    b.HasOne("Orkaris_Back.Models.EntityFramework.Exercise", "ExerciseExerciseGoal")
                        .WithMany("ExerciseGoalExercice")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExerciseExerciseGoal");
                });

            modelBuilder.Entity("Orkaris_Back.Models.EntityFramework.ExerciseGoalPerformance", b =>
                {
                    b.HasOne("Orkaris_Back.Models.EntityFramework.ExerciseGoal", "ExerciseGoalExerciseGoalPerformance")
                        .WithMany("ExerciseGoalPerformanceExerciseGoal")
                        .HasForeignKey("ExerciseGoalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExerciseGoalExerciseGoalPerformance");
                });

            modelBuilder.Entity("Orkaris_Back.Models.EntityFramework.Session", b =>
                {
                    b.HasOne("Orkaris_Back.Models.EntityFramework.User", "UserSession")
                        .WithMany("SessionUser")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Orkaris_Back.Models.EntityFramework.Workout", "WorkoutSession")
                        .WithMany("SessionWorkout")
                        .HasForeignKey("WorkoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserSession");

                    b.Navigation("WorkoutSession");
                });

            modelBuilder.Entity("Orkaris_Back.Models.EntityFramework.SessionExercise", b =>
                {
                    b.HasOne("Orkaris_Back.Models.EntityFramework.ExerciseGoal", "ExerciseGoalSessionExercise")
                        .WithMany("SessionExerciseExerciseGoal")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Orkaris_Back.Models.EntityFramework.Session", "SessionSessionExercise")
                        .WithMany("SessionExerciseSession")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExerciseGoalSessionExercise");

                    b.Navigation("SessionSessionExercise");
                });

            modelBuilder.Entity("Orkaris_Back.Models.EntityFramework.SessionPerformance", b =>
                {
                    b.HasOne("Orkaris_Back.Models.EntityFramework.Session", "SessionSessionPerformance")
                        .WithMany("SessionPerformanceSession")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SessionSessionPerformance");
                });

            modelBuilder.Entity("Orkaris_Back.Models.EntityFramework.Workout", b =>
                {
                    b.HasOne("Orkaris_Back.Models.EntityFramework.User", "UserWorkout")
                        .WithMany("WorkoutUser")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserWorkout");
                });

            modelBuilder.Entity("Orkaris_Back.Models.EntityFramework.Category", b =>
                {
                    b.Navigation("ExerciseCategoryCategory");
                });

            modelBuilder.Entity("Orkaris_Back.Models.EntityFramework.Exercise", b =>
                {
                    b.Navigation("ExerciseCategoryExercise");

                    b.Navigation("ExerciseGoalExercice");
                });

            modelBuilder.Entity("Orkaris_Back.Models.EntityFramework.ExerciseGoal", b =>
                {
                    b.Navigation("ExerciseGoalPerformanceExerciseGoal");

                    b.Navigation("SessionExerciseExerciseGoal");
                });

            modelBuilder.Entity("Orkaris_Back.Models.EntityFramework.Session", b =>
                {
                    b.Navigation("SessionExerciseSession");

                    b.Navigation("SessionPerformanceSession");
                });

            modelBuilder.Entity("Orkaris_Back.Models.EntityFramework.Sport", b =>
                {
                    b.Navigation("CategorySport");
                });

            modelBuilder.Entity("Orkaris_Back.Models.EntityFramework.User", b =>
                {
                    b.Navigation("EmailUser");

                    b.Navigation("SessionUser");

                    b.Navigation("WorkoutUser");
                });

            modelBuilder.Entity("Orkaris_Back.Models.EntityFramework.Workout", b =>
                {
                    b.Navigation("SessionWorkout");
                });
#pragma warning restore 612, 618
        }
    }
}
